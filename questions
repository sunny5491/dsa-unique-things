1:https://www.geeksforgeeks.org/problems/recursively-remove-all-adjacent-duplicates0744/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card   
in this question we have to recursively remove adjacent similar words. we have to remember in step s[i]==s[i+1] wwe increment i to i+1 but in while loop i again increments so that letter is no more in new
string. here is the code:
#User function Template for python3

class Solution:
    def removeUtil (self, S):
        def remove_adjacent_duplicates(s):
            if not s:
                return s  
        
            n = len(s)
            i = 0
            new_s = ""
        
            while i < n:
                if i < n - 1 and s[i] == s[i + 1]:
                    while i < n - 1 and s[i] == s[i + 1]:
                        i += 1  
                else:
                    new_s += s[i]  
        
                i += 1  
        
            return s if new_s == s else remove_adjacent_duplicates(new_s)
        return remove_adjacent_duplicates(S)

2:https://leetcode.com/problems/min-cost-climbing-stairs/     in this question we have to reach to the end ie beyond last index so we take to two 
elements a,b for last element and for beyond last element. then we iterate and change b to a and a to temp:
code : class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        a, b = cost[-1], 0


        for n in range(len(cost) - 2, -1, -1):
            temp = min(a + cost[n], b + cost[n])
            b = a
            a = temp
        
        return min(a, b)
        
3: https://www.geeksforgeeks.org/batch/gfg-160-problems/track/recursion-and-backtracking-gfg-160/problem/permutations-of-a-given-string2041 
try this question
4:https://leetcode.com/problems/permutation-sequence/?envType=problem-list-v2&envId=recursion
this question is from leetcode. In this we have to find kth string of numbers for ex; n=4 then 2nd value is "1243"  we have to find kth permutation.
import math
class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        l = [str(i) for i in range(1, n + 1)]
        k -= 1
        
        def find_perm(l, k):
            if not l:
                return ""
            fact = math.factorial(len(l) - 1)
            index = k // fact
            return l.pop(index) + find_perm(l, k % fact)

        return find_perm(l, k)

 this is by rec.
import math
class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        l = [str(i) for i in range(1, n + 1)]
        k -= 1
        res = []
        fact = math.factorial(n)

        for i in range(n, 0, -1):
            fact //= i
            index = k // fact
            res.append(l.pop(index))
            k %= fact

        return "".join(res)
 this is by normal loop.

